@page "/editgame"
@page "/editgame/{id:int}"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject GenresClient GenresClient

<PageTitle>@title</PageTitle>

<h3>@title</h3>

@if (genres is null || game is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm 
                Model="@game" 
                FormName="editGame" 
                OnValidSubmit="HandleSubmitAsync"
                Enhance
            >
                <DataAnnotationsValidator/>
                <ValidationSummary />
            <div class="mb-3">
                <label for="name">Name:</label>
                <InputText class="form-control" @bind-Value="game.Name" id="name" />
                <ValidationMessage For="() => game.Name" />
            </div>
            <div class="mb-3">
                <label for="genre">Genre:</label>
                <InputSelect class="form-select" @bind-Value="game.GenreId" id="genre">
                <option value="">Select a genre</option>
                @foreach (var genre in genres)
                {
                    <option value="@genre.Id">@genre.Name</option>
                }
                </InputSelect>
                <ValidationMessage For="() => game.GenreId" />
            </div>
            <div class="mb-3">
                <label for="price">Price:</label>
                <InputNumber class="form-control" @bind-Value="game.Price" id="price" />
                <ValidationMessage For="() => game.Price" />
            </div>
            <div class="mb-3">
                <label for="releaseDate">Release Date:</label>
                <InputDate class="form-control" @bind-Value="game.ReleaseDate" id="releaseDate" />
            </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <a role="button" href="/" class="btn btn-secondary">Cancel</a>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    private GameDetails? game {get; set;}

    private Genre[]? genres;

    private string title = string.Empty; 

    protected override async Task OnParametersSetAsync()
    {
        if (game is not null)
        {
            return;
        }

        if (Id is not null)
        {
            game = await GamesClient.GetGameAsync(Id.Value);
            title = $"Edit {game.Name}"; 
        }
        else
        {
            game = new()
            {
                Name = string.Empty,
                ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)
            };

            title = "New Game"; 
        }
    }

    protected override async Task OnInitializedAsync()
    {
        genres = await GenresClient.GetGenresAsync();
    }

    private async Task HandleSubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(game);

        if (Id is null)
        {
            await GamesClient.AddGameAsync(game);
        }
        else
        {
            game.Id = Id.Value;
            await GamesClient.UpdateGameAsync(game);
        }

        NavigationManager.NavigateTo("/");
    }
}
    
   
