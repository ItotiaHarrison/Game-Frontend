@page "/editgame"
@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject GenresClient GenresClient

<PageTitle>New game</PageTitle>

<h3>New Game</h3>

@if (genres is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@game" FormName="editGame" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary />
            <div class="mb-3">
                <label for="name">Name:</label>
                <InputText class="form-control" @bind-Value="game.Name" id="name" />
                <ValidationMessage For="() => game.Name" />
            </div>
            <div class="mb-3">
                <label for="genre">Genre:</label>
                <InputSelect class="form-select" @bind-Value="game.GenreId" id="genre">
                <option value="">Select a genre</option>
                @foreach (var genre in genres)
                {
                    <option value="@genre.Id">@genre.Name</option>
                }
                </InputSelect>
                <ValidationMessage For="() => game.GenreId" />
            </div>
            <div class="mb-3">
                <label for="price">Price:</label>
                <InputNumber class="form-control" @bind-Value="game.Price" id="price" />
                <ValidationMessage For="() => game.Price" />
            </div>
            <div class="mb-3">
                <label for="releaseDate">Release Date:</label>
                <InputDate class="form-control" @bind-Value="game.ReleaseDate" id="releaseDate" />
            </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <a role="button" href="/" class="btn btn-secondary">Cancel</a>
            </EditForm>
        </div>
    </div>
}

@code {

    [SupplyParameterFromForm]
    private GameDetails game {get; set;} = new()
    {
        Name = string.Empty,
        ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)
    };

    private Genre[]? genres;

    protected override void OnInitialized()
    {
        genres = GenresClient.GetGenres();
    }

    private void HandleSubmit()
    {
        GamesClient.AddGame(game);
        NavigationManager.NavigateTo("/");
    }
}
    
   
